Code and the Real World

        I just finished reading "Almost Too Beautiful", Kyle Gann's review of Morton Feldman's String Quartet No. 2, a six hour long "vast musical quilt of sonic objects". He speaks about the need of art to have enough time to effect a change in us, and how, in our world, there is so little time for art like this to exist.

        I do not, in general, write or post on Sunday. It is a day I have set aside for other activities; not religious, in general, but "other". Often, I spend the day doing housework and listening to music, catching up on the activities the world does not leave time to have done during the rest of the week. Currently I am working with a developmentally disabled (brain injury at birth) man on Sundays, helping him with his housework, life, etc. The process has allowed me some time to reflect, as he moves through life slowly, with lots of naps.
        
        I have thought to myself many times that he could use a computer to satisfy many of his life needs and wants, if there were a computer set up so that he could use it. It is inappropriate to talk about a learning curve for someone like Harwood (not his real name). He knows how to turn something on, with a switch. He knows how to read, more or less, at least in the sense of being able to make sense of individual words of not more that three syllables. Sentences, syntax, processes, directions; these are all beyond him in any real sense. Which means that even the most user-friendly computer can only be, for him, a cluster of unrelated words and images that cannot be navigated except in the most rudimentary ways.
        
        This brings me to the actual point of the matter.
        
        Computer programs are not real, and have no inherent connection to the real world. They are, at best, models made up of the electrical properties of sub-microscopic switches arranged in such a way that an intelligible thing issues forth, when supported by exactly the proper environment. As such, they are really good for constructing models of ideas, and moving the blocks of ideas around. Over millions of years of evolution, organisms have learned how the real world works, and have deeply in-grained responses to many environmental cues, many of which we thinking humans have taught ourselves to ignore in order to make sense of our increasingly complex and non-natural world. In fact, we could say that modern humanity, and the process of growing up into the modern world, is exactly the process of unlearning what is natural to us and learning newer, more appropriate responses matching our newer, more technical, idea-oriented environment. There are people who cannot do this, and I would put them into two distinct groups. The first is people like Harwood, who simply cannot move much past their own reflexive indifference to technological complexity. The second is people who, through no fault of their own, grew up in an environment that rewarded adaptation to a different technological complexity that we have at near the fore-front of computer sales today. These people are those who, because of poverty or age, grew up in a time and place where different technologies were important. I would put forth the thesis that both of these groups have the same initial computer problem: Nothing works the way they expect it to.
        
        This is not the kind of problem hackers are typically very good at solving. In the hacker meritocracy, if something doesn't work the way you expect, you make it work or make your own that does, or you read the documentation, or you (as a last resort, or if you're really a n00b) ask someone for help on a help site. Possibly, if you are a hacker, you make products for the "sheeple" to consume, equating sheeple with those who, like Harwood, cannot even read instructions, much less install an update -- no matter how simple the process -- to an app they use every day.
        
        I am working on a "new" sort of software, that tries to model a very "natural" process for people like Harwood; perhaps also for people like your grandparents, or great grandparents. It gives them a way to use a computer, because this computer models a bygone world of their memories and imaginations, where things work when you turn them on. A toaster toasts. An engine runs. A vacuum vacuums. The computer turns on, then does exactly what it says it will do. It helps you write a letter. It goes on line to look up something you are interested in. It communicates with your family. It helps you find a movie to watch, or music to listen to. It helps you find people of your own age and background to talk to.
        
        My company is called the Working Computer, and we do exactly what it says: we make computers work, when people ask them to. It is not, in the typical sense, anyway, an IT company. It is a people company that specializes in a particular kind of difficulty that today's humans have, that is the modern computer. For those who are completely in the dark, we offer computers set up with our proprietary software that makes them work (really a program overlay that captures the screen and simplifies it, abstracting away all of the extraneous clutter), making it very difficult to make a mistake. For people wanting their own computers to behave themselves, we offer an array of programs and services to help them accomplish the tasks they want, safely and well. For those who already have computers that obstinately refuse to work, we repair or replace, and retrain.
